// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/sero-cash/go-sero/common/hexutil"
	"github.com/sero-cash/go-sero/zero/txs/stx"
)

var _ = (*txdataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		Price   *hexutil.Big  `json:"gasPrice" gencodec:"required"`
		Payload hexutil.Bytes `json:"input"    gencodec:"required"`
		Stxt    *stx.T        `json:"stxt"    gencodec:"required"`
	}
	var enc txdata
	enc.Price = (*hexutil.Big)(t.Price)
	enc.Payload = t.Payload
	enc.Stxt = t.Stxt
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		Price   *hexutil.Big   `json:"gasPrice" gencodec:"required"`
		Payload *hexutil.Bytes `json:"input"    gencodec:"required"`
		Stxt    *stx.T         `json:"stxt"    gencodec:"required"`
	}
	var dec txdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Price == nil {
		return errors.New("missing required field 'gasPrice' for txdata")
	}
	t.Price = (*big.Int)(dec.Price)
	if dec.Payload == nil {
		return errors.New("missing required field 'input' for txdata")
	}
	t.Payload = *dec.Payload
	if dec.Stxt == nil {
		return errors.New("missing required field 'stxt' for txdata")
	}
	t.Stxt = dec.Stxt
	return nil
}
